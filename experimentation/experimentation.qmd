---
title: "Experimentation"
format:
  html:
    code-fold: false
jupyter: python3
---

## Loading Required Libraries

```{python}
import pandas as pd
import numpy as np
import requests
import json
import os
import mlflow
import datetime
import plotly.graph_objects as go
from great_tables import GT
import mlflow


from statsforecast import StatsForecast
from statsforecast.models import (
    HoltWinters,
    CrostonClassic as Croston, 
    HistoricAverage,
    DynamicOptimizedTheta,
    SeasonalNaive,
    AutoARIMA,
    AutoETS,
    AutoTBATS,
    MSTL

)

from mlforecast import MLForecast
from mlforecast.target_transforms import Differences
from mlforecast.utils import PredictionIntervals
from window_ops.expanding import expanding_mean
from lightgbm import LGBMRegressor
from xgboost import XGBRegressor
from sklearn.linear_model import Lasso, LinearRegression, Ridge
from sklearn.neural_network import MLPRegressor
from sklearn.ensemble import RandomForestRegressor
from utilsforecast.plotting import plot_series
from statistics import mean

import backtesting as bkt
```


## Data
Loading metadata:

```{python}
raw_json = open("../settings/settings.json")
meta_json = json.load(raw_json)

meta_path = meta_json["meta_path"]
data_path = meta_json["data"]["data_path"]
series_mapping_path = meta_json["data"]["series_mapping_path"]
```

Loading the dataset:
```{python}
df = pd.read_csv(data_path)
ts = df[["period", "subba", "y"]].copy()
ts["ds"] = pd.to_datetime(ts["period"])
ts = ts[["ds", "subba", "y"]]
ts = ts.rename(columns={"subba":"unique_id"})

GT(ts.head(10))
```




```{python}
fig = go.Figure()

for i in ts["unique_id"].unique():
  d = None
  d = ts[ts["unique_id"] == i]
  name = i,
  fig.add_trace(go.Scatter(x=d["ds"], 
    y=d["y"], 
    name = i,
    mode='lines'))
    
fig.update_layout(title = "The Hourly Demand for Electricity in New York by Independent System Operator")
fig
```


```{python}
fig = plot_series(ts, max_ids= len(ts.unique_id.unique()), 
plot_random=False, 
max_insample_length=24 * 30,
engine = "plotly")
fig.update_layout(title = "The Hourly Demand for Electricity in New York by Independent System Operator")
fig
```

## Models Settings
Loading the backtesting settings:
```{python}
bkt_settings = meta_json["backtesting"]["settings"]
models_settings = meta_json["backtesting"]["models"]
leaderboard_path = meta_json["backtesting"]["leaderboard_path"]
mlflow_path = meta_json["backtesting"]["mlflow_path"]
models_settings.keys()
```





```{python}
exp = bkt.backtesting()
exp.add_input(input = ts)
exp.add_settings(models = models_settings, settings = bkt_settings)


```

```{python}
exp.run_backtesting()
```


```{python}
exp.log_backtesting(mlflow_path = mlflow_path, verbose = False)
```


```{python}
GT(exp.score.head())
```

```{python}
GT(exp.leaderboard.head(10))
```


```{python}
GT(exp.top)
```






```{python}
exp.top.to_csv(leaderboard_path, index = False) 
```

