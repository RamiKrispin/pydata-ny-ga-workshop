---
title: "Data Refresh"
format:
    html:
        code-fold: false
jupyter: python3
---


## Load Libraries

```{python}
import eia_api as api
import eia_data 
import eia_impute as impute
import pandas as pd
import numpy as np
import requests
import json
import os
import datetime
import plotly.express as px
import plotly.graph_objects as go
from great_tables import GT
```

## Settings

Load settings:
```{python}
raw_json = open("../settings/settings.json")
meta_json = json.load(raw_json)
# Prototype version
# series = pd.DataFrame(meta_json["series_prototype"])
# Full version
series = pd.DataFrame(meta_json["series"])
api_path = meta_json["api_path"]
meta_path = meta_json["meta_path"]
data_path = meta_json["data_path"]
# Should be setting as false during development
save_data = True
save_meta = True

eia_api_key = os.getenv('EIA_API_KEY')

```



```{python}

facets_template = {
    "parent" : None,
    "subba" : None
}

offset = meta_json["refresh"]["offset"]
```


```{python}
metadata = api.eia_metadata(api_key = eia_api_key, api_path = api_path)

print(metadata.meta.keys())
print(metadata.meta["startPeriod"])
print(metadata.meta["endPeriod"])
```


```{python}
meta_obj = eia_data.get_metadata(api_key = eia_api_key, api_path = api_path, meta_path = meta_path, series = series, offset = 6)

GT(meta_obj.request_meta)
```



```{python}
m = meta_obj.request_meta
index = meta_obj.last_index + 1
data = None
meta_new = None

for i in m.index:
    facets = facets_template
    facets["parent"] = m.at[i, "parent"]
    facets["subba"] = m.at[i, "subba"]
    start = m.at[i, "request_start"]
    end = m.at[i, "end"]

    # Case I - new data is available
    if m.at[i, "updates_available"]:
        print(m.at[i, "subba"], "- New updates are available, trying to refresh the data")
        temp = api.eia_backfill(api_key = eia_api_key, 
            api_path = api_path+ "data", 
            facets = facets, 
            start = start.to_pydatetime()- datetime.timedelta(hours = 24),
            end = end.to_pydatetime() + datetime.timedelta(hours = 24),
            offset = offset) 

        temp.data = temp.data[(temp.data["period"] <= end.to_pydatetime()) & (temp.data["period"] >= start.to_pydatetime())]

        end_actual = temp.data.period.max()
        ts_obj = pd.DataFrame(np.arange(start = start, stop = end_actual + datetime.timedelta(hours = 1), step = datetime.timedelta(hours = 1)).astype(datetime.datetime), columns=["index"])
        ts_obj  = ts_obj.merge(temp.data, left_on = "index", right_on = "period", how="left")
        ts_obj.drop("period", axis = 1, inplace= True)
        ts_obj = ts_obj.rename(columns= {"index": "period"})
    # Case II - new data is not available
    else:
        ts_obj = None
        print("No new data is available")

    meta_temp = eia_data.create_metadata(data = ts_obj, start = start, end = end, type = "refresh")
    print(meta_temp)
    meta_temp = pd.DataFrame([meta_temp])
    # Handling missing values
    if ts_obj is not None and meta_temp["na"].iloc[0] is not None and meta_temp["na"].iloc[0] >= 0:
        print(meta_temp)
        missing_index = ts_obj.value.isnull()
        ts_obj.loc[missing_index, "subba"] = meta_temp["subba"].iloc[0]
        ts_obj.loc[missing_index, "parent"] = meta_temp["parent"].iloc[0]
        ts = impute.impute_series(series= ts_obj, metadata =meta_temp)
        ts_obj = ts.data
        meta_temp = ts.metadata



    if ts_obj is None:
        meta_temp["parent"].iloc[0] =  m.at[i, "parent"]
        meta_temp["subba"].iloc[0] =  m.at[i, "subba"]
    # Append the data if the refresh was successful
    if meta_temp["success"].iloc[0] and meta_temp["update"].iloc[0]:
        print("Append the new data")
        d = eia_data.append_data(data_path = data_path, new_data = ts_obj, save = save_data)
        meta_temp["update"].iloc[0] = True
    elif not meta_temp["success"].iloc[0]:
        meta_temp["update"].iloc[0] = False
        meta_temp["comments"].iloc[0] = meta_temp["comments"].iloc[0] + "The data refresh failed, please check the log; "


    if data is None:
        data = ts_obj
    else:
        data = data._append(ts_obj)

    if meta_new is None:
        meta_new = meta_temp
    else:
        meta_new = meta_new._append(meta_temp)
meta_new.reset_index(drop=True, inplace=True)
```

```{python}
GT(meta_new,rowname_col = "index")
```



```{python}
meta_updated = eia_data.append_metadata(meta_path = meta_path, meta = meta_new, save = save_meta, init = False)

GT(meta_updated)
```


### Plot the Series

We will use Plotly to visualize the series:

```{python}

if data is not None:
    input = data.sort_values(by = ["subba", "period"])
    p = px.line(input, x="period", y="value", color="subba")
    p.show()
else: 
    input = None
    print("No new data is available")
```



## Forecast Refresh

